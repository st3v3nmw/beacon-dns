{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"Beacon DNS <p>Runs on a single vCPU, a small hill of RAM, and pure determination.</p> <p>A DNS resolver with customizable &amp; schedulable filtering for malware, trackers, ads, and other unwanted content.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Blocking<ul> <li>Supports blocking of ads, malware, adult content, dating &amp; social media sites, video streaming platforms, and other content</li> <li>Blocking can be done network-wide or per device group</li> <li>Blocking can also be scheduled so that certain content is only blocked at certain times</li> </ul> </li> <li>Caching<ul> <li>Supports caching of DNS records for up to the record's TTL which speeds up DNS lookups</li> <li>Supports serving stale DNS records while the record is refreshed in the background</li> </ul> </li> <li>Prefetching<ul> <li>\"Learns\" your query patterns to prefetch subsequent queries before the device makes them</li> </ul> </li> <li>Client Lookup<ul> <li>Supports looking up of the client's hostname</li> </ul> </li> <li>Statistics<ul> <li>Allows you view statistics per device over a given period of time</li> </ul> </li> <li>API<ul> <li>Allows you to get statistics</li> <li>Allows you to watch queries live as they're being made</li> <li>Allows you to get the current config</li> </ul> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Go to this page to install and configure Beacon DNS.</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#statistics","title":"Statistics","text":""},{"location":"api/#per-device","title":"Per Device","text":"<pre><code>$ curl -s http://&lt;server-ip&gt;/api/stats/devices?last=24h | jq\n[\n {\n    \"client\": \"phone\",\n    \"total_queries\": &lt;n&gt;,\n    \"unique_domains\": &lt;n&gt;,\n    \"cached_queries\": &lt;n&gt;,\n    \"cache_hit_ratio\": &lt;%&gt;,\n    \"blocked_queries\": &lt;n&gt;,\n    \"block_ratio\": &lt;%&gt;,\n    \"prefetched_queries\": &lt;n&gt;,\n    \"prefetched_ratio\": &lt;%&gt;,\n    \"typical_response_time\": &lt;ms&gt;,\n    \"typical_forwarded_response_time\": &lt;ms&gt;,\n    \"min_response_time\": &lt;ms&gt;,\n    \"max_response_time\": &lt;ms&gt;,\n    \"query_types\": {\n      \"A\": &lt;n&gt;,\n      \"AAAA\": &lt;n&gt;,\n      \"HTTPS\": &lt;n&gt;\n    },\n    \"block_reasons\": {\n      \"ads\": &lt;n&gt;,\n      \"gaming\": &lt;n&gt;,\n      \"social-media\": &lt;n&gt;,\n      \"video-streaming\": &lt;n&gt;\n    },\n    \"upstreams\": {\n      \"1.1.1.1\": &lt;n&gt;\n    },\n    \"resolved_domains\": {\n      \"apresolve.spotify.com\": &lt;n&gt;,\n      \"spclient.wg.spotify.com\": &lt;n&gt;,\n      ...\n    },\n    \"blocked_domains\": {\n      \"app-measurement.com\": &lt;n&gt;,\n      \"incoming.telemetry.mozilla.org\": &lt;n&gt;,\n      ...\n    },\n    \"response_codes\": {\n      \"NOERROR\": &lt;n&gt;,\n      \"NXDOMAIN\": &lt;n&gt;,\n      \"REFUSED\": &lt;n&gt;\n    },\n    \"ips\": {\n      \"&lt;ip&gt;\": &lt;n&gt;\n    }\n }\n]\n</code></pre>"},{"location":"api/#cache","title":"Cache","text":"<pre><code>$ curl -s http://&lt;server-ip&gt;/api/cache | jq\n{\n  \"hits\": &lt;n&gt;,\n  \"misses\": &lt;n&gt;,\n  \"ratio\": &lt;%&gt;,    # hits / (hits + misses) * 100\n  \"evicted\": &lt;n&gt;,  # evicted after expiry OR if the cache size exceeds capacity\n  \"size\": &lt;n&gt;,     # number of records currently in the cache\n  \"capacity\": &lt;n&gt;  # how many records the cache can store when full\n}\n</code></pre>"},{"location":"api/#querylog","title":"Querylog","text":"<p>You can watch the querylog live:</p> <pre><code>$ websocat ws://&lt;server-ip&gt;/api/watch\\?clients=phone\n{\"hostname\":\"phone\",\"ip\":\"&lt;ip&gt;\",\"domain\":\"spclient.wg.spotify.com\",\"query_type\":\"A\",\"cached\":false,\"blocked\":false,\"block_reason\":null,\"upstream\":\"1.1.1.1\",\"response_code\":\"NOERROR\",\"response_time\":1,\"prefetched\":false,\"timestamp\":\"2024-12-09T21:06:05.067810278Z\"}\n{\"hostname\":\"phone\",\"ip\":\"&lt;ip&gt;\",\"domain\":\"spclient.wg.spotify.com\",\"query_type\":\"A\",\"cached\":true,\"blocked\":false,\"block_reason\":null,\"upstream\":null,\"response_code\":\"NOERROR\",\"response_time\":0,\"prefetched\":false,\"timestamp\":\"2024-12-09T21:06:05.08479734Z\"}\n</code></pre>"},{"location":"api/#config","title":"Config","text":"<pre><code>$ curl -s http://&lt;server-ip&gt;/api/config | jq\n{\n  ...\n}\n</code></pre>"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#blocking","title":"Blocking","text":"<p>Supports blocking of ads, malware, adult content, dating &amp; social media sites, video streaming platforms, and other content.</p> <p>Blocking can be done network-wide or per device group:</p> <pre><code>groups:\n  # not specifying devices blocks on the entire network\n  all:\n    block:\n      - ads\n      - malware\n      - adult\n\n  screens:\n    devices:\n      - phone\n      - laptop\n      - tv\n</code></pre> <p>Blocking can also be scheduled so that certain content is only blocked at certain times:</p> <pre><code>schedules:\n  bedtime:\n    apply_to:\n      - screens\n    when:\n      - days: [\"sun\", \"mon\", \"tue\", \"wed\", \"thur\", \"fri\", \"sat\"]\n        periods:\n        - start: \"22:00\"\n          end: \"06:00\"\n    block:\n      - social-media\n      - video-streaming\n      - gaming\n      - dating\n</code></pre> <p>For now, rDNS queries for private IP ranges that reach the resolver are always blocked.</p>"},{"location":"config/#caching","title":"Caching","text":"<p>Supports caching of DNS records for up to the record's TTL. This can then be served to other devices in the network thus speeding up DNS lookups.</p> <p>But, DNS records on the internet use ridicuously low TTLs. The resolver can be configured to serve stale DNS records while it refreshes/prefetches the record in the background.</p> <p>Beacon DNS also \"learns\" your query patterns to prefetch subsequent queries before the device makes them. For instance, when <code>github.com</code> is queried, <code>avatars.githubusercontent.com</code> &amp; <code>github.githubassets.com</code> usually follow. So when the resolver sees <code>github.com</code>, it can prefetch the next two before the device queries for them.</p> <pre><code>cache:\n  capacity: 1000\n  serve_stale:\n    for: 5m\n    with_ttl: 15s\n  query_patterns:\n    follow: true\n    look_back: 14d\n</code></pre>"},{"location":"config/#client-lookup","title":"Client Lookup","text":"<p>Supports looking up of the client's hostname either using reverse DNS:</p> <pre><code>client_lookup:\n  upstream: 100.100.100.100 # your router's IP or tailscale's MagicDNS IP\n  method: rdns\n  refresh_after: 1h\n</code></pre> <p>Or hardcoded based on the static IPs configured on your router:</p> <pre><code>client_lookup:\n  clients:\n    192.168.0.102: laptop\n    192.168.0.103: phone\n</code></pre>"},{"location":"config/#statistics","title":"Statistics","text":"<p>Beacon DNS stores your queries for a configured retention period:</p> <pre><code>querylog:\n  enabled: true\n  log_clients: true\n  retention: 90d\n</code></pre> <p>The querylog allows us to generate statistics and compute the query patterns.</p>"},{"location":"config/#timezone","title":"Timezone","text":"<p>To change the server's timezone:</p> <pre><code>system:\n  timezone: Africa/Nairobi\n</code></pre>"},{"location":"config/#sources","title":"Sources","text":"<p>You can use override the default lists this way:</p> <pre><code>sources:\n  update_interval: 1d\n  lists:\n    - name: peter-lowe:adservers\n      url: https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts\n      category: ads\n      action: block\n      format: hosts\n    - name: beacon-dns-lists:allowlists:social-media\n      url: https://raw.githubusercontent.com/st3v3nmw/beacon-dns-lists/main/allowlists/social-media\n      category: social-media\n      action: allow\n      format: domains\n</code></pre> <p>The format can either be <code>domains</code> or <code>hosts</code>.</p> <p>Allowlists have higher precedence than blocklists to remove false positives from a category.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#configuration","title":"Configuration","text":"<p>We'll start by creating a starter configuration file (<code>config.yml</code>):</p> <pre><code>dns:\n  port: 53\n  upstreams:\n    - 1.1.1.1\n\napi:\n  port: 80\n\nclient_lookup:\n  upstream: 192.168.8.1 # Router's IP\n  method: rdns\n\ngroups:\n  all:\n    block:\n      - ads\n      - malware\n      - adult\n</code></pre> <p>For more information on the available configuration options, check this page.</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>Installation with Docker is by far the easiest method and most recommended.</p>"},{"location":"installation/#docker-compose","title":"Docker Compose","text":"<p>Create a <code>compose.yml</code> file with the following content:</p> <pre><code>services:\n  beacon-dns:\n    container_name: beacon-dns\n    image: ghcr.io/st3v3nmw/beacon-dns:latest\n    volumes:\n      - /home/${USER}/beacon-dns:/data\n    environment:\n      - BEACON_CONFIG_FILE=/data/config.yml\n      - BEACON_DATA_DIR=/data\n    restart: unless-stopped\n    privileged: true\n    network_mode: host\n</code></pre> <p>This assumes we're storing the service's data in <code>/home/${USER}/beacon-dns</code>. Create that folder and put the <code>config.yml</code> file there. You're free to put the volume anywhere but make sure the <code>compose.yml</code> file matches.</p> <p>Start the container by running <code>docker compose up -d</code>. You can check the logs by running <code>docker logs beacon-dns</code>.</p>"},{"location":"installation/#updating","title":"Updating","text":"<pre><code>$ docker compose down\n$ docker pull ghcr.io/st3v3nmw/beacon-dns:latest\n$ docker compose up -d\n</code></pre>"},{"location":"installation/#standalone-binary","title":"Standalone binary","text":"<p>Clone this repository: <code>git clone https://github.com/st3v3nmw/beacon-dns.git</code></p> <p>Build the binary: <code>make build</code></p> <p>Make it executable: <code>chmod +x beacon</code></p> <p>Download and extract <code>sqlean</code> extensions in some folder (<code>BEACON_EXTENSIONS_DIR</code>).</p> <p>Create a folder to store Beacon DNS' data (<code>BEACON_DATA_DIR</code>).</p> <p>Export the <code>BEACON_EXTENSIONS_DIR</code>, <code>BEACON_DATA_DIR</code>, and <code>BEACON_CONFIG_FILE</code> environment variables where <code>BEACON_CONFIG_FILE</code> is the path to your <code>config.yml</code>.</p> <p>Start the server: <code>./beacon</code>.</p> <p>If you're on certain Linux distributions, you can create a systemd service file to start the service on boot automatically.</p>"},{"location":"installation/#ansible","title":"Ansible","text":"<p>Here's an Ansible script to install and run Beacon DNS on Ubuntu. You'll need to follow the steps above to build the standalone binary and then run <code>make ansible-deploy</code>.</p>"}]}